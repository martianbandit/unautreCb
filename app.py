import os
import streamlit as st
from textwrap import dedent
from dotenv import load_dotenv
from crewai import Agent, Task, Crew, Process
from crewai_tools import SerperDevTool
from langchain.llms import Ollama

# Charger les variables d'environnement
load_dotenv()
MODEL = os.getenv('MODEL', 'mistral')

# Initialisation du mod√®le LLM
llm = Ollama(model=MODEL)

# D√©finition des outils
search_tool = SerperDevTool()

# Cr√©ation des agents
def create_agents():
    return {
        "Lead Market Analyst": Agent(
            role="Lead Market Analyst",
            goal="Analyser les produits et concurrents pour fournir des insights marketing.",
            backstory="Expert en analyse de march√©, vous scrutez les tendances et identifiez les opportunit√©s.",
            tools=[search_tool],
            llm=llm,
            verbose=True
        ),
        "Chief Marketing Strategist": Agent(
            role="Chief Marketing Strategist",
            goal="Synth√©tiser les analyses pour formuler des strat√©gies marketing innovantes.",
            backstory="Strat√®ge marketing reconnu, vous cr√©ez des campagnes percutantes.",
            tools=[search_tool],
            llm=llm,
            verbose=True
        ),
        "Creative Content Creator": Agent(
            role="Creative Content Creator",
            goal="Cr√©er du contenu engageant pour les r√©seaux sociaux.",
            backstory="Sp√©cialiste en storytelling digital, vous transformez les id√©es en visuels attractifs.",
            tools=[search_tool],
            llm=llm,
            verbose=True
        ),
        "Senior Photographer": Agent(
            role="Senior Photographer",
            goal="Capturer des images percutantes pour les publicit√©s Instagram.",
            backstory="Photographe chevronn√©, vous donnez vie aux produits gr√¢ce √† vos clich√©s.",
            tools=[search_tool],
            llm=llm,
            verbose=True
        ),
        "Chief Creative Director": Agent(
            role="Chief Creative Director",
            goal="Superviser et approuver le contenu cr√©√© par l'√©quipe marketing.",
            backstory="Directeur artistique exp√©riment√©, vous assurez la coh√©rence et la qualit√© des productions.",
            tools=[search_tool],
            llm=llm,
            verbose=True
        ),
    }

# Cr√©ation des t√¢ches
def create_tasks(agents):
    return {
        "Competitor Analysis": Task(
            description="R√©aliser une analyse approfondie des concurrents pour identifier les tendances et opportunit√©s.",
            expected_output="Un rapport structur√© des forces et faiblesses des concurrents.",
            tools=[search_tool],
            agent=agents["Lead Market Analyst"]
        ),
        "Strategy Planning": Task(
            description="√âlaborer une strat√©gie marketing bas√©e sur l'analyse concurrentielle.",
            expected_output="Un document avec des recommandations strat√©giques d√©taill√©es.",
            tools=[search_tool],
            agent=agents["Chief Marketing Strategist"]
        ),
        "Content Creation": Task(
            description="Produire du contenu cr√©atif et engageant pour les r√©seaux sociaux.",
            expected_output="Un ensemble de visuels et textes adapt√©s aux campagnes Instagram.",
            tools=[search_tool],
            agent=agents["Creative Content Creator"]
        ),
        "Photography": Task(
            description="Prendre des photos percutantes align√©es avec la strat√©gie marketing.",
            expected_output="Une s√©rie d'images professionnelles pr√™tes √† √™tre utilis√©es dans les publicit√©s.",
            tools=[search_tool],
            agent=agents["Senior Photographer"]
        ),
        "Review & Approval": Task(
            description="V√©rifier et valider les productions de l'√©quipe avant publication.",
            expected_output="Un feedback d√©taill√© et une version finale approuv√©e du contenu.",
            tools=[search_tool],
            agent=agents["Chief Creative Director"]
        ),
    }

# Interface Streamlit
st.title("üöÄ Marketing CrewAI avec Streamlit")

if st.button("Lancer l'Analyse Marketing"):
    st.write("üîç Initialisation des agents et des t√¢ches...")

    # Instanciation des agents et des t√¢ches
    agents = create_agents()
    tasks = create_tasks(agents)

    # Cr√©ation du Crew
    crew = Crew(
        agents=list(agents.values()),
        tasks=list(tasks.values()),
        process=Process.sequential
    )

    st.write("üõ†Ô∏è Ex√©cution du workflow...")
    
    # Ex√©cution du Crew avec un sujet g√©n√©rique
    result = crew.kickoff(inputs={'topic': 'Marketing Digital'})

    # Affichage du r√©sultat
    st.subheader("üìä R√©sultats de l'analyse marketing :")
    st.write(result)

st.write("Appuyez sur le bouton ci-dessus pour lancer l'analyse marketing compl√®te.")